service: checkout-workflow

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  environment:
    INVENTORY_TABLE:
      Ref: InventoryTable
    USER_TABLE:
      Ref: UserTable
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource:
        - Fn::GetAtt: [InventoryTable, Arn]
        - Fn::GetAtt: [UserTable, Arn]
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:us-east-2:<accountid>:NotifyCourier
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:us-east-2:<accountid>:OrderProcessingQueue
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:us-east-2:<accountid>:stateMachine:checkoutWorkflow

plugins:
  - serverless-step-functions

functions:
  checkInventory:
    handler: handler.checkInventory
  calculateTotal:
    handler: handler.calculateTotal
  redeemPoints:
    handler: handler.redeemPoints
  billCustomer:
    handler: handler.billCustomer
  prepareOrder:
    handler: handler.prepareOrder
  restoreRedeemPoints:
    handler: handler.restoreRedeemPoints
  sqsWorker:
    handler: handler.sqsWorker
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-2:<accountid>:OrderProcessingQueue
          batchSize: 1
  restoreQuantity:
    handler: handler.restoreQuantity

stepFunctions:
  stateMachines:
    checkoutWorkflow:
      name: checkoutWorkflow
      definition:
        StartAt: checkInventory
        States:
          checkInventory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Catch:
              - ErrorEquals: [ItemOutOfStock]
                Next: ItemOutOfStock
              - ErrorEquals: [ItemNotFound]
                Next: ItemNotFound
            ResultPath: "$.item"
            Next: calculateTotal
          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal, Arn]
            ResultPath: "$.total"
            Next: IsRedeemNeeded
          IsRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer
          RedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints, Arn]
            ResultPath: "$.total"
            Catch:
              - ErrorEquals: [States.All]
                Next: redeemPointsError
            Next: BillCustomer
          BillCustomer:
            Type: Task
            Resource:
              Fn::GetAtt: [billCustomer, Arn]
            ResultPath: "$.billingStatus"
            Retry:
              - ErrorEquals: [States.All]
                MaxAttempts: 3
            Catch:
              - ErrorEquals: [States.All]
                ResultPath: "$.customerBillingError"
                Next: BillingError
            Next: PrepareOrder
          PrepareOrder:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.us-east-2.amazonaws.com/<accountid>/OrderProcessingQueue
              MessageBody:
                Token.$: "$$.Task.Token"
                Input.$: "$"
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder
          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:us-east-2:<accountid>:NotifyCourier
              Message.$: "$"
            Next: Dispatched
          Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true
          ItemNotFound:
            Type: Pass
            Result: "Item Not Found"
            End: true
          ItemOutOfStock:
            Type: Pass
            Result: "Item is out of stock"
            End: true
          redeemPointsError:
            Type: Pass
            Result: "Error in redeeming points"
            End: true
          BillingError:
            Type: Pass
            Result: "Error in billing"
            ResultPath: "$.billingError"
            Next: RestoreRedeemPoints
          RestoreRedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreRedeemPoints, Arn]
            End: true
          RestoreQuantity:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreQuantity, Arn]
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints
          RefundCustomer:
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity

# create a dynamodb table for inventory table  with on demand

resources:
  Resources:
    InventoryTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: inventory
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: user
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
